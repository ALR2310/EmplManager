using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;
using System.Security.Cryptography;
using System.Text;
using System.Diagnostics;
// <auto-generated />
namespace DAL
{
    /// <summary>
    /// Controller class for Users
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class UserController
    {
        // Preload our schema..
        User thisSchemaLoad = new User();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (System.Web.HttpContext.Current != null)
                    {
                        userName = System.Web.HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = System.Threading.Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public UserCollection FetchAll()
        {
            UserCollection coll = new UserCollection();
            Query qry = new Query(User.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public UserCollection FetchByID(object Id)
        {
            UserCollection coll = new UserCollection().Where("Id", Id).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public UserCollection FetchByQuery(Query qry)
        {
            UserCollection coll = new UserCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        public bool getTokenUser(string token)
        {
            InlineQuery qry = new InlineQuery();
            string query = $"Select Id From authTokens Where authToken = '{token}'";
            List<AuthTokens> LoggedTokens = qry.ExecuteTypedList<AuthTokens>(query);
            return LoggedTokens.Count == 1;
        }
        public string generateAndSetToken(int id,string username, string password)
        {
            InlineQuery qry = new InlineQuery();
            string query = $"Select authToken From authTokens Where Id = {id}";


            List<AuthTokens> LoggedTokens = qry.ExecuteTypedList<AuthTokens>(query);


            if (LoggedTokens.Count == 1) { return LoggedTokens[0].authToken; }
            string currentTime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string tokenData = username + password + currentTime;
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(tokenData));

                // Convert the hashed bytes to a hexadecimal string
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < hashBytes.Length; i++)
                {
                    sb.Append(hashBytes[i].ToString("x2"));
                }
                qry.Execute($"Insert Into authTokens Values ({id},'{sb.ToString()}')");
                return sb.ToString();
            }
        }
        public string Login(string username, string password)
        {
            InlineQuery qry = new InlineQuery();
       
           

            // Concatenate the username, password, and current time


            // Compute the hash of the token data using SHA256
        
            List<User> LoggedUsers = qry.ExecuteTypedList<User>($"Select * From Users Where (UserName = '{username}' or Email = '{username}') and Password = '{password}'");
            
            
            if (LoggedUsers.Count == 0)
            {
                return "_failed_";
            }

            return generateAndSetToken(LoggedUsers[0].Id,username, password);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (User.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (User.Destroy(Id) == 1);
        }



        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public User Insert(User item)
        {
            item.Save(UserName);
            return item;
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public User Update(User item)
        {
            item.MarkOld();
            item.IsLoaded = true;
            item.Save(UserName);
            return item;
        }
    }
}
